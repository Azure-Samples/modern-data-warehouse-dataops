parameters:
- name: environmentName
  type: string
- name: databricksDomain
  type: string
- name: databricksToken
  type: string
- name: databricksClusterId
  type: string

jobs:
- deployment: deploy_libs
  dependsOn: test_libs
  environment: ${{ parameters.environmentName }}
  displayName: 'Deploy libs to Databricks'
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    pythonVersion: 3.8
  strategy:
    runOnce:
      deploy:
        steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '$(pythonVersion)'
            addToPath: true
            architecture: 'x64'
          displayName: 'Use Python Version: $(pythonVersion)'

        - checkout: self
          persistCredentials: true
          clean: true
          displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'

        - script: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            pip install -e .
          displayName: 'Install dependencies'

        - script: |
            python setup.py bdist_wheel --universal
          displayName: 'Build wheel package'

        - task: CopyFiles@2
          inputs:
            SourceFolder: './dist'
            contents: '**'
            targetFolder: $(Build.ArtifactStagingDirectory)
          displayName: 'Copy package folder'

        - task: PublishBuildArtifacts@1
          inputs:
            pathToPublish: $(Build.ArtifactStagingDirectory)
            artifactName: libs
          displayName: 'Publish DevOps Scripts'

        - script: |
            python -m pip install --upgrade pip
            pip install databricks-cli
          displayName: 'Setup  databricks-cli'
        - script: |
            echo "Uploading libs at $(Build.ArtifactStagingDirectory) to workspace dbfs:/lib-dist ..."
            databricks fs mkdirs dbfs:/lib-dist
            databricks fs cp "$(Build.ArtifactStagingDirectory)" dbfs:/lib-dist --recursive --overwrite
          env:
            DATABRICKS_HOST: ${{ parameters.databricksDomain }}
            DATABRICKS_TOKEN: ${{ parameters.databricksToken }}
          displayName: 'Upload libs'
        - script: |
            echo "Installing libs dbfs:/lib-dist ..."
            for file in `databricks fs ls dbfs:/lib-dist --absolute`
            do
                extension="${file##*.}"
                if [ $extension = "whl" ]
                then
                    echo "Installing libs $file ..."
                    databricks libraries install --cluster-id $CLUSTER --whl $file
                fi
            done
          condition: succeeded()
          env:
            DATABRICKS_HOST: ${{ parameters.databricksDomain }}
            DATABRICKS_TOKEN: ${{ parameters.databricksToken }}
            CLUSTER: ${{ parameters.databricksClusterId }}
          displayName: 'Install libs'