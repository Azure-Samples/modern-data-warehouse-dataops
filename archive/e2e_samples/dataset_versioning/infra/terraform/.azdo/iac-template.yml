parameters:
- name: buildValidation
  type: boolean
  default: false
- name: IaCRepo
  type: string
  default: infra
- name: buildingEnvironment
  type: string
  default: staging
jobs:
- deployment: IaC
  displayName: IaC
  pool:
    vmImage: 'Ubuntu-latest'
  variables:
  - group: terraform-secret-${{ parameters.buildingEnvironment }}
  - group: terraform-var-${{ parameters.buildingEnvironment }}
  environment: ${{ parameters.buildingEnvironment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: ${{ parameters.IaCRepo }}
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.8'
          displayName: 'Use Python 3.8'
        - script: |
            echo "Downloading terraform..."
            mkdir -p /tmp/tf-downloads
            curl -sSL -o /tmp/tf-downloads/terraform.zip https://releases.hashicorp.com/terraform/$(terraform-version)/terraform_$(terraform-version)_linux_amd64.zip
            unzip /tmp/tf-downloads/terraform.zip
            sudo mv -f terraform /usr/local/bin/
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          displayName: 'Terraform Install'
        - script: |
            python -m pip install pre-commit
            python -m pip install checkov
            pre-commit install
          displayName: "Install pre-commit and checkov"
        - script: |
            pre-commit run checkov --all-files --show-diff-on-failure
            pre-commit run terraform_fmt --all-files --show-diff-on-failure
            pre-commit run end-of-file-fixer --all-files --show-diff-on-failure
            pre-commit run trailing-whitespace --all-files --show-diff-on-failure
            pre-commit run mixed-line-ending --all-files --show-diff-on-failure
            pre-commit run yamllint --all-files --show-diff-on-failure
          displayName: "Run pre-commit"
        - script: |
              export ARM_SUBSCRIPTION_ID=$(tf-subscription-id)
              export ARM_CLIENT_ID=$(tf-sp-id)
              export ARM_CLIENT_SECRET=$(tf-sp-secret)
              export ARM_TENANT_ID=$(tf-tenant-id)
              echo '#######Terraform Init########'
              terraform init -backend-config="storage_account_name=$(tf-storage-name)" -backend-config="container_name=terraform-state" -backend-config="access_key=$(tfstate-storage-key)" -backend-config="key=terraform.tfstate"
              echo '#######Terraform Validate########'
              terraform validate
              echo '#######Terraform Plan########'
              terraform plan -var="rg_name=$(rg-name)" -var="app_name=$(app-name)" -out="out.plan"
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/env/${{ parameters.buildingEnvironment }}'
          displayName: 'Terraform Init, Validate, Plan'
        - script: |
            export ARM_SUBSCRIPTION_ID=$(tf-subscription-id)
            export ARM_CLIENT_ID=$(tf-sp-id)
            export ARM_CLIENT_SECRET=$(tf-sp-secret)
            export ARM_TENANT_ID=$(tf-tenant-id)
            terraform apply out.plan
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/env/${{ parameters.buildingEnvironment }}'
          displayName: 'Terraform Apply'
          condition: and(succeeded(), eq(${{ parameters.buildValidation }}, false))
