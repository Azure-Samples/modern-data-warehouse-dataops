trigger:
  branches:
    include:
    - main
    - release/*
  paths:
    include:
    - e2e_samples/parking_sensors/*

pr: none

variables:
  basePath: 'e2e_samples/parking_sensors'
  pythonWorkingDir: '$(basePath)/src/ddo_transform'
  pythonPackageMajorVersion:  1
  pythonPackageMinorVersion:  1
  pythonPackagePatchVersion:  $(Build.BuildId)
  sqlDwPath: '$(basePath)/sql/ddo_azuresqldw_dw'
  sqlDwSolutionName: 'ddo_azuresqldw_dw'
  sqlDwSolution: '$(sqlDwPath)/$(sqlDwSolutionName).sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: 'publish_artifacts'
  displayName: 'Publish Build Artifacts'
  variables:
  - group: mdwdops-secrets-dev
  jobs:
  - job: 'publish_python_packages'
    displayName: 'Publish Python Packages'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8'
        architecture: 'x64'

    - script: pip install -r requirements_dev.txt && pip install -r requirements.txt
      workingDirectory: $(pythonWorkingDir)
      displayName: 'Install requirements'

    - script: make dist
      env:
        PACKAGE_VERSION: $(pythonPackageMajorVersion).$(pythonPackageMinorVersion).$(pythonPackagePatchVersion)
      workingDirectory: $(pythonWorkingDir)
      displayName: 'Create wheel package'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(pythonWorkingDir)/dist'
        ArtifactName: 'dist'
      displayName: 'Publish Dist Artifacts'

  - job: 'publish_static_artifacts'
    displayName: 'Publish Static Artifacts'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(basePath)/databricks'
        ArtifactName: 'databricks'
      displayName: 'Publish Databricks Artifacts'

    # using npm to validate and generate ARM template
    # https://techcommunity.microsoft.com/blog/azuredatafactoryblog/automated-publish-improvement-in-adfs-cicd-flow/2117350
    - task: Npm@1
      inputs:
        command: 'install'
        workingDir: '$(Build.Repository.LocalPath)/$(basePath)/adf' #replace with the package.json folder
        verbose: true
      displayName: 'Install npm package'

    # still throwing an error, but the ARM template is generated and pipeline completes successfully
    # https://learn.microsoft.com/en-us/answers/questions/282058/automated-publishing-of-data-factory-with-devops
    # https://microsoft-bitools.blogspot.com/2021/09/adf-deploy-missing-publishconfigjson.html
    - task: Npm@1
      inputs:
        command: 'custom'
        workingDir: '$(Build.Repository.LocalPath)/$(basePath)/adf' #replace with the package.json folder
        customCommand: 'run build export $(Build.Repository.LocalPath)/$(basePath)/adf $(adfResourceId) "arm-template"'
      displayName: 'Validate and Generate ARM template'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(basePath)/adf/_scripts/deploymentadf.ps1'
        ArtifactName: 'adf_scripts'
      displayName: 'Publish ADF Scripts'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(basePath)/adf/arm-template'
        ArtifactName: 'adf_arm_template'
      displayName: 'Publish ADF ARM Template'
  - job: 'publish_sql_packages'
    displayName: 'Publish SQL Packages'
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(sqlDwSolution)'

    - task: VSBuild@1
      inputs:
        solution: '$(sqlDwSolution)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
    - task: VSTest@2
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(sqlDwPath)/$(sqlDwSolutionName)/bin/$(buildConfiguration)/ddo_azuresqldw_dw.dacpac'
        ArtifactName: 'sql_dw_dacpac'
      displayName: 'Publish SQL DACPAC'