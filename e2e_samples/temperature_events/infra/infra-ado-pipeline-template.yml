# Azure Devops pipeline template used in infra-ado-ci-pipeline-test.yml and infra-ado-ci-pipeline.yml
parameters:
- name: buildValidation
  type: boolean
  default: false
- name: IaCRepo
  type: string
  default: InfraAsCode

jobs:
- deployment: IaC
  displayName: IaC
  pool:
    vmImage: 'Ubuntu-latest'
  variables:
  - group: terraform-secret
  environment: 'Dev'
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: ${{ parameters.IaCRepo }}

        - task: TerraformInstaller@0
          displayName: 'Terraform install'
          inputs:
            terraformVersion: '0.13.0'

        - script: |
            terraform fmt -check -recursive
          workingDirectory: '$(System.DefaultWorkingDirectory)/Infra/terraform'
          displayName: 'Terraform Lint'

        - script: |
              export ARM_SUBSCRIPTION_ID=$(tf-subscription-id)
              export ARM_CLIENT_ID=$(tf-sp-id)
              export ARM_CLIENT_SECRET=$(tf-sp-secret)
              export ARM_TENANT_ID=$(tf-tenant-id)
              echo '#######Terraform Init########'
              terraform init -backend-config="storage_account_name=$(tf-storage-name)" -backend-config="container_name=terraform-state" -backend-config="access_key=$(tfstate-storage-key-dev)" -backend-config="key=terraform.tfstate"
              echo '#######Terraform Plan########'
              terraform plan -out="out.plan"
          workingDirectory: '$(System.DefaultWorkingDirectory)/Infra/terraform/live/dev'
          displayName: 'Terraform Init && Terraform Plan'

        - script: |
            terraform apply out.plan
          workingDirectory: '$(System.DefaultWorkingDirectory)/Infra/terraform/live/dev'
          displayName: 'Terraform Apply'
          condition: and(succeeded(), eq(${{ parameters.buildValidation }}, false))
